--- AnomalyCollection.C	2007-12-14 13:13:41.000000000 -0600
+++ AnomalyCollection.C_fixed	2007-12-14 12:52:30.000000000 -0600
@@ -355,25 +355,35 @@
 	{
 		vector <string> TempHold = TakeDelimitedList(LineRead, ',');
 
-		if (ConfigInfo.GiveEventTypeIndex(TempHold[1]) == string::npos)
-                {
-			// the event type doesn't even exist in the configuration file.
-                        cerr << "ERROR: Invalid event type: " << TempHold[1] << endl;
-                        EventFile.close();
-                        return(9);
-                }
-		else if (binary_search(CAFEOptions.EventTypes.begin(), CAFEOptions.EventTypes.end(), TempHold[1]))
+		if (TempHold.size() == 4)	// Date, type, lat, lon
 		{
-			// the event type is an event type indicated by given command 
-			// line options or by the defaults (config file) if no options are given
-			time_t TheDateTime = GetTime(TempHold[0]);
-			TheDateTime = IncrementDateTime(TheDateTime, TimeOffset);	// by default, no change occurs
-			RoundHour(TheDateTime, RoundingHourValue);			// round to the nearest RoundingHourValue hours, starting at 00Z.
-			EventDates.push_back(TheDateTime);
-			EventTypes.push_back(TempHold[1]);
-			EventLats.push_back(StrToDouble(TempHold[2]));
-			EventLons.push_back(StrToDouble(TempHold[3]));
+			if (ConfigInfo.GiveEventTypeIndex(TempHold[1]) == string::npos)
+        	        {
+				// the event type doesn't even exist in the configuration file.
+                        	cerr << "ERROR: Invalid event type: " << TempHold[1] << endl;
+	                        EventFile.close();
+        	                return(9);
+                	}
+			else if (binary_search(CAFEOptions.EventTypes.begin(), CAFEOptions.EventTypes.end(), TempHold[1]))
+			{
+				// the event type is an event type indicated by given command 
+				// line options or by the defaults (config file) if no options are given
+				time_t TheDateTime = GetTime(TempHold[0]);
+				TheDateTime = IncrementDateTime(TheDateTime, TimeOffset);	// by default, no change occurs
+				RoundHour(TheDateTime, RoundingHourValue);			// round to the nearest RoundingHourValue hours, starting at 00Z.
+				EventDates.push_back(TheDateTime);
+				EventTypes.push_back(TempHold[1]);
+				EventLats.push_back(StrToDouble(TempHold[2]));
+				EventLons.push_back(StrToDouble(TempHold[3]));
+			}
 		}
+		else
+		{
+			cerr << "ERROR: Invalid line in the event file: " << LineRead << endl
+			     << "       Must be a comma delimited list of date, event type, lat, and lon.\n"
+			     << "       Skipping...\n";
+		}
+
 		
 		getline(EventFile, LineRead);
 	}
--- AnomalyCollection_GR.C	2007-07-30 22:53:36.000000000 -0500
+++ AnomalyCollection_GR.C_fixed	2007-12-14 13:19:28.000000000 -0600
@@ -350,24 +350,33 @@
 	{
 		vector <string> TempHold = TakeDelimitedList(LineRead, ',');
 
-		if (ConfigInfo.GiveEventTypeIndex(TempHold[1]) == string::npos)
-                {
-			// the event type doesn't even exist in the configuration file.
-                        cerr << "ERROR: Invalid event type: " << TempHold[1] << endl;
-                        EventFile.close();
-                        return(9);
-                }
-		else if (binary_search(CAFEOptions.EventTypes.begin(), CAFEOptions.EventTypes.end(), TempHold[1]))
+		if (TempHold.size() == 4)
 		{
-			// the event type is an event type indicated by given command 
-			// line options or by the defaults (config file) if no options are given
-			time_t TheDateTime = GetTime(TempHold[0]);
-			TheDateTime = IncrementDateTime(TheDateTime, TimeOffset);	// by default, no change occurs
-			RoundHour(TheDateTime, RoundingHourValue);			// round to the nearest RoundingHourValue hours, starting at 00Z.
-			EventDates.push_back(TheDateTime);
-			EventTypes.push_back(TempHold[1]);
-			EventLats.push_back(StrToDouble(TempHold[2]));
-			EventLons.push_back(StrToDouble(TempHold[3]));
+			if (ConfigInfo.GiveEventTypeIndex(TempHold[1]) == string::npos)
+	                {
+				// the event type doesn't even exist in the configuration file.
+                	        cerr << "ERROR: Invalid event type: " << TempHold[1] << endl;
+                        	EventFile.close();
+	                        return(9);
+        	        }
+			else if (binary_search(CAFEOptions.EventTypes.begin(), CAFEOptions.EventTypes.end(), TempHold[1]))
+			{
+				// the event type is an event type indicated by given command 
+				// line options or by the defaults (config file) if no options are given
+				time_t TheDateTime = GetTime(TempHold[0]);
+				TheDateTime = IncrementDateTime(TheDateTime, TimeOffset);	// by default, no change occurs
+				RoundHour(TheDateTime, RoundingHourValue);			// round to the nearest RoundingHourValue hours, starting at 00Z.
+				EventDates.push_back(TheDateTime);
+				EventTypes.push_back(TempHold[1]);
+				EventLats.push_back(StrToDouble(TempHold[2]));
+				EventLons.push_back(StrToDouble(TempHold[3]));
+			}
+		}
+		else
+		{
+			cerr << "ERROR: Invalid line in the event file: " << LineRead << endl
+                             << "       Must be a comma delimited list of date, event type, lat, and lon.\n"
+                             << "       Skipping...\n";
 		}
 		
 		getline(EventFile, LineRead);
